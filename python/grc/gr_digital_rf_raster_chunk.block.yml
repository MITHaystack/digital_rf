# ----------------------------------------------------------------------------
# Copyright (c) 2019 Massachusetts Institute of Technology (MIT)
# All rights reserved.
#
# Distributed under the terms of the BSD 3-clause license.
#
# The full license is in the LICENSE file, distributed with this software.
# ----------------------------------------------------------------------------

id: gr_digital_rf_raster_chunk
label: Raster Chunk

parameters:
-   id: input
    label: Input Type
    dtype: enum
    default: fc32
    options: [sc8, sc16, fc32, fc64, s8, s16, f32, f64]
    option_labels: [Complex int8, Complex int16, Complex float32, Complex float64,
        int8, int16, float32, float64]
    option_attributes:
        dtype: ['np.dtype([("r", "i1"), ("i", "i1")])', 'np.dtype([("r", "i2"), ("i", "i2")])',
            np.complex64, np.complex128, np.int8, np.int16, np.float32, np.float64]
        type: [sc8, sc16, fc32, fc64, s8, s16, f32, f64]
    hide: part
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'none' if vlen > 1 else 'part' }
-   id: raster_length
    label: Raster Length
    dtype: int
    default: '10000'
-   id: nperseg
    label: Chunk Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: noverlap
    label: Num Overlapping
    dtype: int
    default: '0'
    hide: part
-   id: max_raster_length
    label: Max Raster Length
    dtype: int
    default: '0'
    hide: part
-   id: max_noverlap
    label: Max Num Overlapping
    dtype: int
    default: '0'
    hide: part

inputs:
-   domain: stream
    dtype: ${ input.type }
    vlen: ${ vlen }

outputs:
-   domain: stream
    dtype: ${ input.type }
    vlen: ${ nperseg }
asserts:
- ${ vlen > 0 }
- ${ noverlap >= 0 }
- ${ nperseg > noverlap }
- ${ raster_length >= nperseg }
- ${ max_raster_length * (max_raster_length - raster_length) >= 0 }
- ${ max_noverlap * (max_noverlap - noverlap) >= 0 }

templates:
    imports: import numpy as np; import gr_digital_rf
    make: >
        gr_digital_rf.raster_chunk(
            dtype=${input.dtype},
            vlen=${vlen},
            raster_length=${raster_length},
            nperseg=${nperseg},
            noverlap=${noverlap},
            max_raster_length=${ None if max_raster_length == '0' else max_raster_length },
            max_noverlap=${ None if max_noverlap == '0' else max_noverlap },
        )
    callbacks:
    - set_raster_length(${raster_length})
    - set_noverlap(${noverlap})

documentation: |-
    Chunk periodic rasters into fixed-size vectors with optional overlap.

    The input data is provided as samples with length 'Vec Length' and type
    'Input Type'. It is then divided into raster windows with a number of
    samples equal to 'Raster Length'. Each raster window is then broken
    into chunks of 'Chunk Length' samples with an overlap of
    'Num Overlapping' samples. The output may be zero-padded at the
    end to ensure that all of the samples in the raster window are
    included in an output chunk. Each chunk is output as a vector whose
    total length is 'Chunk Length' times 'Vec Length'.

    The advantage of a raster of data is that its size can be changed in
    a running flowgraph, but it can be useful to interface raster data
    with fixed-size vectors (such as for FFTs).


    Parameters
    --------------------

    Input Type : np.dtype
        Data type of the input and output data.

    Vec Length : int
        Vector length of the *input* data (NOT the output vector length).

    Raster Length : int
        Length of the raster window.

    Chunk Length : int
        Fixed length of each output chunk. If the input data is itself a
        vector, then each output vector will have a length of
        'Chunk Length' times 'Vec Length'.

    Num Overlapping : int
        Number of samples to overlap for each output chunk.


    Other Parameters
    --------------------------

    Max Raster Length : int
        Maximum possible raster length, to allow for changes while the
        block is running. Knowing the maximum length allows for allocation
        of appropriately-sized buffers. If None, four times the initial
        `raster_length` will be used.

    Max Num Overlapping : int
        Maximum possible number of overlap samples, to allow for changes
        while the block is running. Knowing the maximum number allows for
        allocation of appropriately-sized buffers. If None, two thirds of
        `nperseg` will be used.

file_format: 1
