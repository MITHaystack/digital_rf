<?xml version="1.0"?>
<!--
  Copyright (c) 2018 Massachusetts Institute of Technology (MIT)
  All rights reserved.

  Distributed under the terms of the BSD 3-clause license.

  The full license is in the LICENSE file, distributed with this software.
-->
<block>
    <name>Raster Select</name>
    <key>gr_digital_rf_raster_select</key>
    <category>Raster</category>
    <import>import numpy as np; import gr_digital_rf</import>
    <make>\
    gr_digital_rf.raster_select_aggregate(
        dtype=$input.dtype,
        vlen=$vlen,
        raster_length=$raster_length,
        select_start=$select_start,
        select_length=None if $select_length==0 else $select_length,
        nagg=$nagg,
        agg_op=$agg_op if $agg.op == 'custom' else $agg.op,
        agg_op_args=$agg_op_args if $agg.op == 'custom' else ($take_index,) if $agg.op == 'take' else (),
        max_raster_length=None if $max_raster_length==0 else $max_raster_length,
        max_select_length=None if $max_select_length==0 else $max_select_length,
        max_nagg=None if $max_nagg==0 else $max_nagg,
    )
    </make>

    <callback>set_raster_length($raster_length)</callback>
    <callback>set_select_start($select_start)</callback>
    <callback>set_select_length($select_length)</callback>
    <callback>set_nagg($nagg)</callback>
    <callback>set_agg_op($agg_op)</callback>
    <callback>set_agg_op_args($agg_op_args)</callback>

    <param>
        <name>Input Type</name>
        <key>input</key>
        <value>fc32</value>
        <type>enum</type>
        <hide>part</hide>
        <option>
            <name>Complex int8</name>
            <key>sc8</key>
            <opt>type:sc8</opt>
            <opt>dtype:np.int8</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>Complex int16</name>
            <key>sc16</key>
            <opt>type:sc16</opt>
            <opt>dtype:np.int16</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>Complex float32</name>
            <key>fc32</key>
            <opt>type:fc32</opt>
            <opt>dtype:np.complex64</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>Complex float64</name>
            <key>fc64</key>
            <opt>type:fc64</opt>
            <opt>dtype:np.complex128</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>int8</name>
            <key>s8</key>
            <opt>type:s8</opt>
            <opt>dtype:np.int8</opt>
            <opt>complex:False</opt>
        </option>
        <option>
            <name>int16</name>
            <key>s16</key>
            <opt>type:s16</opt>
            <opt>dtype:np.int16</opt>
            <opt>complex:False</opt>
        </option>
        <option>
            <name>float32</name>
            <key>f32</key>
            <opt>type:f32</opt>
            <opt>dtype:np.float32</opt>
            <opt>complex:False</opt>
        </option>
        <option>
            <name>float64</name>
            <key>f64</key>
            <opt>type:f64</opt>
            <opt>dtype:np.float64</opt>
            <opt>complex:False</opt>
        </option>
    </param>
    <param>
        <name>Vec Length</name>
        <key>vlen</key>
        <value>1</value>
        <type>int</type>
        <hide>#if $vlen() > 1 then 'none' else 'part'#</hide>
    </param>
    <param>
        <name>Raster Length</name>
        <key>raster_length</key>
        <value>10000</value>
        <type>int</type>
    </param>
    <param>
        <name>Select Start</name>
        <key>select_start</key>
        <value>0</value>
        <type>int</type>
        <hide>#if $select_start() > 0 then 'none' else 'part'#</hide>
    </param>
    <param>
        <name>Select Length</name>
        <key>select_length</key>
        <value>0</value>
        <type>int</type>
        <hide>#if $select_length() > 0 then 'none' else 'part'#</hide>
    </param>
    <param>
        <name>Num Aggregate</name>
        <key>nagg</key>
        <value>1</value>
        <type>int</type>
        <hide>#if $nagg() > 1 then 'none' else 'part'#</hide>
    </param>
    <param>
        <name>Agg Op</name>
        <key>agg</key>
        <value>mean</value>
        <type>enum</type>
        <hide>#if $nagg() > 1 then 'none' else 'all'#</hide>
        <option>
            <name>Mean</name>
            <key>mean</key>
            <opt>op:'mean'</opt>
        </option>
        <option>
            <name>Sum</name>
            <key>sum</key>
            <opt>op:'sum'</opt>
        </option>
        <option>
            <name>Max</name>
            <key>max</key>
            <opt>op:'max'</opt>
        </option>
        <option>
            <name>Min</name>
            <key>min</key>
            <opt>op:'min'</opt>
        </option>
        <option>
            <name>Take</name>
            <key>take</key>
            <opt>op:'take'</opt>
        </option>
        <option>
            <name>Custom</name>
            <key>custom</key>
            <opt>op:'custom'</opt>
        </option>
    </param>
    <param>
        <name>Custom Op</name>
        <key>agg_op</key>
        <value>take</value>
        <type>string</type>
        <hide>#if $nagg() > 1 and $agg()=='custom' then 'part' else 'all'#</hide>
    </param>
    <param>
        <name>Custom Op Args</name>
        <key>agg_op_args</key>
        <value>(0,)</value>
        <type>raw</type>
        <hide>#if $nagg() > 1 and $agg()=='custom' then 'part' else 'all'#</hide>
    </param>
    <param>
        <name>Take Index</name>
        <key>take_index</key>
        <value>0</value>
        <type>int</type>
        <hide>#if $nagg() > 1 and $agg()=='take' then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Max Raster Length</name>
        <key>max_raster_length</key>
        <value>0</value>
        <type>int</type>
        <hide>part</hide>
    </param>
    <param>
        <name>Max Select Length</name>
        <key>max_select_length</key>
        <value>0</value>
        <type>int</type>
        <hide>part</hide>
    </param>
    <param>
        <name>Max Num Aggregate</name>
        <key>max_nagg</key>
        <value>0</value>
        <type>int</type>
        <hide>part</hide>
    </param>

    <check>$vlen > 0</check>
    <check>$raster_length > 0</check>
    <check>$select_length >= 0</check>
    <check>$raster_length >= $select_length</check>
    <check>$select_length * ($raster_length - ($select_start % $raster_length) - $select_length) >= 0</check>
    <check>$nagg > 0</check>
    <check>$max_raster_length >= 0</check>
    <check>$max_select_length >= 0</check>
    <check>$max_nagg >= 0</check>
    <check>$max_raster_length * ($max_raster_length - $raster_length) >= 0</check>
    <check>$max_select_length * ($max_select_length - $select_length) >= 0</check>
    <check>$max_nagg * ($max_nagg - $nagg) >= 0</check>

    <sink>
        <name>in</name>
        <type>$input.type</type>
        <vlen>$vlen</vlen>
    </sink>

    <source>
        <name>out</name>
        <type>$input.type</type>
        <vlen>$vlen</vlen>
    </source>

    <doc>
Select data to pass from periodic raster and optionally aggregate
multiple selections together using a specified operation.

The input data is provided as samples with length 'Vec Length' and type
'Input Type'. It is then divided into raster windows with a number of
samples equal to 'Raster Length'. Within and relative to each raster
window, samples are selected to be output using 'Select Start' and
'Select Length'. The output rasters can optionally be aggregated
together from 'Num Aggregate' outputs to one using the specified
operation.

The advantage of a raster of data is that its size can be changed in
a running flowgraph.


Parameters
--------------------

Input Type : numpy.dtype
    Data type of the input and output data.

Vec Length : int
    Vector length of the *input* data (NOT the output vector length).

Raster Length : int
    Length of the raster window.

Select Start : int
    Index relative to the start of the raster window that indicates the
    start of the output raster.

Select Length : int
    Number of samples to include in the selection from the raster
    window. The equivalent indexing of the raster window would then be
    ``raster[select_start:(select_start + select_length)]``. If None,
    then the length of entire remaining raster window from
    `select_start` will be used.

Num Aggregate : int
    Number of output rasters to aggregate together. The output is thus
    downsampled by `nagg` in whole chunks of the selected raster
    window.

Agg Op : enum
    Aggregation operation. If 'Custom', specify the custom operation
    using the following parameters.

Custom Op : str
    String giving the name of a numpy array method to use for the
    aggregation operation. For a given `agg_op` and `nagg` output
    rasters organized as an ``(nagg, select_length, vlen)``-shaped
    array called ``selections``, the aggregation operation would
    then be ``selections.agg_op(*agg_op_args, axis=0)``.

Custom Op Args : tuple
    Positional arguments to be passed to the aggregation operation
    method specified by 'Custom Op'. See above.

Take Index : int
    If 'Take' is selected as the aggregation operation, this specifies
    the index in range(Num Aggregate) to select for the output.


Other Parameters
--------------------------

Max Raster Length : int
    Maximum possible raster length, to allow for changes while the
    block is running. Knowing the maximum length allows for allocation
    of appropriately-sized buffers. If None, four times the initial
    `raster_length` will be used.

Max Select Length : int
    Maximum possible selection length, to allow for changes while the
    block is running. Knowing the maximum length allows for allocation
    of appropriately-sized buffers. If None, four times the initial
    `select_length` will be used.

Max Num Aggregate : int
    Maximum possible output aggregation, to allow for changes while
    the block is running. Knowing the maximum aggregation size allows
    for allocation of appropriately-sized buffers. If None, a default
    of four times the initial `nagg` will be used.

    </doc>
</block>
