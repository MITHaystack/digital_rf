<?xml version="1.0"?>
<!--
  Copyright (c) 2018 Massachusetts Institute of Technology (MIT)
  All rights reserved.

  Distributed under the terms of the BSD 3-clause license.

  The full license is in the LICENSE file, distributed with this software.
-->
<block>
    <name>Vector Aggregate</name>
    <key>gr_digital_rf_vector_aggregate</key>
    <category>Stream Operators</category>
    <import>import numpy as np; import gr_digital_rf</import>
    <make>\
    gr_digital_rf.vector_aggregate(
        dtype=$input.dtype,
        vlen=$vlen,
        nagg=$nagg,
        agg_op=$agg_op if $agg.op == 'custom' else $agg.op,
        agg_op_args=$agg_op_args if $agg.op == 'custom' else ($take_index,) if $agg.op == 'take' else (),
        max_nagg=None if $max_nagg==0 else $max_nagg,
    )
    </make>

    <callback>set_nagg($nagg)</callback>

    <param>
        <name>Input Type</name>
        <key>input</key>
        <value>fc32</value>
        <type>enum</type>
        <hide>part</hide>
        <option>
            <name>Complex int8</name>
            <key>sc8</key>
            <opt>type:sc8</opt>
            <opt>dtype:np.int8</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>Complex int16</name>
            <key>sc16</key>
            <opt>type:sc16</opt>
            <opt>dtype:np.int16</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>Complex float32</name>
            <key>fc32</key>
            <opt>type:fc32</opt>
            <opt>dtype:np.complex64</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>Complex float64</name>
            <key>fc64</key>
            <opt>type:fc64</opt>
            <opt>dtype:np.complex128</opt>
            <opt>complex:True</opt>
        </option>
        <option>
            <name>int8</name>
            <key>s8</key>
            <opt>type:s8</opt>
            <opt>dtype:np.int8</opt>
            <opt>complex:False</opt>
        </option>
        <option>
            <name>int16</name>
            <key>s16</key>
            <opt>type:s16</opt>
            <opt>dtype:np.int16</opt>
            <opt>complex:False</opt>
        </option>
        <option>
            <name>float32</name>
            <key>f32</key>
            <opt>type:f32</opt>
            <opt>dtype:np.float32</opt>
            <opt>complex:False</opt>
        </option>
        <option>
            <name>float64</name>
            <key>f64</key>
            <opt>type:f64</opt>
            <opt>dtype:np.float64</opt>
            <opt>complex:False</opt>
        </option>
    </param>
    <param>
        <name>Vec Length</name>
        <key>vlen</key>
        <value>1</value>
        <type>int</type>
    </param>
    <param>
        <name>Num Aggregate</name>
        <key>nagg</key>
        <value>1</value>
        <type>int</type>
    </param>
    <param>
        <name>Agg Op</name>
        <key>agg</key>
        <value>mean</value>
        <type>enum</type>
        <option>
            <name>Mean</name>
            <key>mean</key>
            <opt>op:'mean'</opt>
        </option>
        <option>
            <name>Sum</name>
            <key>sum</key>
            <opt>op:'sum'</opt>
        </option>
        <option>
            <name>Max</name>
            <key>max</key>
            <opt>op:'max'</opt>
        </option>
        <option>
            <name>Min</name>
            <key>min</key>
            <opt>op:'min'</opt>
        </option>
        <option>
            <name>Take</name>
            <key>take</key>
            <opt>op:'take'</opt>
        </option>
        <option>
            <name>Custom</name>
            <key>custom</key>
            <opt>op:'custom'</opt>
        </option>
    </param>
    <param>
        <name>Custom Op</name>
        <key>agg_op</key>
        <value>take</value>
        <type>string</type>
        <hide>#if $agg()=='custom' then 'part' else 'all'#</hide>
    </param>
    <param>
        <name>Custom Op Args</name>
        <key>agg_op_args</key>
        <value>(0,)</value>
        <type>raw</type>
        <hide>#if $agg()=='custom' then 'part' else 'all'#</hide>
    </param>
    <param>
        <name>Take Index</name>
        <key>take_index</key>
        <value>0</value>
        <type>int</type>
        <hide>#if $agg()=='take' then 'none' else 'all'#</hide>
    </param>
    <param>
        <name>Max Num Aggregate</name>
        <key>max_nagg</key>
        <value>0</value>
        <type>int</type>
        <hide>part</hide>
    </param>

    <check>$vlen > 0</check>
    <check>$nagg > 0</check>
    <check>$max_nagg >= 0</check>
    <check>$max_nagg * ($max_nagg - $nagg) >= 0</check>

    <sink>
        <name>in</name>
        <type>$input.type</type>
        <vlen>$vlen</vlen>
    </sink>

    <source>
        <name>out</name>
        <type>$input.type</type>
        <vlen>$vlen</vlen>
    </source>

    <doc>
Aggregate consecutive vectors together using a specified operation.

Parameters
--------------------

Input Type : numpy.dtype
    Data type of the input and output data.

Vec Length : int
    Vector length of the input and output data.

Num Aggregate : int
    Number of output vectors to aggregate together. The output is thus
    downsampled by `nagg` in whole vector chunks.

Agg Op : enum
    Aggregation operation. If 'Custom', specify the custom operation
    using the following parameters.

Custom Op : str
    String giving the name of a numpy array method to use for the
    aggregation operation. For a given `agg_op` and `nagg` output
    vectors organized as an ``(nagg, vlen)``-shaped array called
    ``vectors``, the aggregation operation would then be
    ``vectors.agg_op(*agg_op_args, axis=0)``.

Custom Op Args : tuple
    Positional arguments to be passed to the aggregation operation
    method specified by 'Custom Op'. See above.

Take Index : int
    If 'Take' is selected as the aggregation operation, this specifies
    the index in range(Num Aggregate) to select for the output.


Other Parameters
--------------------------

Max Num Aggregate : int
    Maximum possible output aggregation, to allow for changes while
    the block is running. Knowing the maximum aggregation size allows
    for allocation of appropriately-sized buffers. If None, a default
    of four times the initial `nagg` will be used.

    </doc>
</block>
